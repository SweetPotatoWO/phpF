<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace Wechat\Controller;

use Common\Common\AesSecurity;
use Common\Common\CodeGenerator;
use Common\Common\Redis;
use Service\User\Logic\UserInviteLogic;
use Service\User\Logic\UserLogic;
use Service\News\Logic\WeiXinLogic;
use Service\News\Logic\SendSMSLogic;
use Service\Integral\Logic\IntegralLogic;
use Think\Controller;

/**
 * Description of UserController
 *
 * @author Administrator
 */
class UserController extends Controller {

    /**
     * 用户邀请
     */
    public function inviteFriend() {
        $token = $_COOKIE['token'];
        $aes = new AesSecurity();
        $token = $aes->decryptData($token);
        $info = $this->getTokenInfo($token);
        if(!$info) {
            echo "页面出现错误";
            exit;
        }
        $userID = $info['userID'];
        $logic = new IntegralLogic();
        $qmCoin = $logic->getUserTotalCoinByType($userID, 'invitingFriends'); //用户邀请获得的总启币
        $Integral = new UserInviteLogic();
        $list = $Integral->getList($userID);
        $this->assign("count",count($list));
        $this->assign('list',$list);
        $a  = (empty($list))? 1:2;
        $this->assign('isempty',$a);
        $code = new CodeGenerator();
        $code = $code->createCode($userID);
        $url = SITE."wechat/user/inviteFriend/key/".$code;
        $this->assign('url',$url);
        $this->assign('inviteCoin', $qmCoin);
        $this->display('inviteFriend');
    }


    /**
     * 根据token获取到参数
     * @param $token
     * @return bool
     */
    private function getTokenInfo($token) {
        if (!empty($token)) {
            $redis = Redis::GetInstance();
            $searchKey = $this->getLoginCaheKey($token);
            $keys = $redis->getKeys($searchKey);
            if ($keys) {
                if (count($keys) > 1) {
                    logger_sys("Token重复", serialize($keys));
                }
                $userInfo = $redis->get($keys[0]);
                if ($userInfo) {
                    return $userInfo;
                }
            }
        }
        return false;
    }

    /**
     * 获取登录缓存key
     * @param type $token
     * @param type $userID
     * @return type
     */
    private function getLoginCaheKey($token, $userID = '') {
        return sprintf('APP_Login_%s_%s', $token, $userID);
    }


    /**
     * 显示注册的页面
     *
     */
    public function register()  {
        $key  = I("key");
        $this->assign("key",$key);
        $this->display("register");
    }


    /**
     * 处理注册的数据
     */
    public function handleRegister() {
        $phone = I("phone");
        $code = I("code");
        $key = I("key");
        $Gen = new CodeGenerator();
        $userID = $Gen->decode($key);
        $user = new UserLogic();
        $userIntvit = new UserInviteLogic();
        $info = $user->getByPhone($phone);
        if(empty($userID)) {
            echo json_encode(array('err'=>1,'msg'=>'数据丢失'));
            exit;
        }
        if(!empty($info)) {
            echo json_encode(array('err'=>1,'msg'=>'用户已经注册过'));
            exit;
        }
        $arr = $userIntvit->getInviteOne($userID,$phone);
        if(!empty($arr)) {
            echo json_encode(array('err'=>1,'msg'=>'已经邀请过'));
            exit;
        }
        if(!verify_phone($phone)) {
            echo json_encode(array('err'=>1,'msg'=>'手机号码错误'));
            exit;
        }
        $entity["phone"] = $phone;
        $entity["smsCode"] = $code;
        $entity["terminal"] = 1;
        $entity['operateIP'] = getIP();
        $res = $user->smsLogin($entity);
        if($res * 1 > 0) {
            $res = $userIntvit->saveInvite($userID,$phone,$res);
            if($res) {   //邀请成功的时候
                $intavit = new IntegralLogic();
                $intavit->userIntegralInc($userID,'newbieTasks','invitingFriends');  //添加积分
            }
            $info['err'] = 0;
            $info['data'] = $Gen->decode($res);
            $info['msg'] = "注册成功";
        } else {
            $info['err'] = 1;
            $info['msg'] = "登录失败";
        }
        echo json_encode($info);
        exit;
    }


    /**
     * 发送短信
     */
    public function sms() {
        $phone = I('phone');
        if(!verify_phone($phone)) {   //验证手机号码
            echo json_encode(array('err'=>1,'msg'=>'手机号码错误'));
            exit;
        }

        $user = new UserLogic();
        $info = $user->getByPhone($phone);
        if(!empty($info)) {
            echo json_encode(array('err'=>1,'msg'=>'用户已经注册过'));
            exit;
        }

        $logic = new SendSMSLogic();
        $res = $logic->sendCode($phone,'find','1');
        if ($res === true) {
            $data['err'] = 0;
            $data["msg"] = "发送验证码成功";
        } else {
            $data["err"] = 1;
            $data["msg"] = $res;
        }
        echo json_encode($data);
        exit;
    }



    /**
     * 注册成功
     */
    public function registerSuccess() {
        $key = I("key");
        $otherkey = I("otherkey");
        $Gen = new CodeGenerator();
        $IntvituserID = $Gen->decode($key);
        $userlogic = new UserLogic();
        $userID = $Gen->decode($otherkey);
        $IntviteInfo = $userlogic->getUserInfo($IntvituserID);
        $userInfo = $userlogic->getUserInfo($userID);
        $this->assign('phone',hidPhone($userInfo['phone']));
        $this->assign('Invitephone',hidPhone($IntviteInfo['phone']));
        $this->display('regsucceed');
    }

    /**
     * 获取邀请记录
     */
    public function getInviteRecord() {
        
    }

    /**
     * 用户注册
     */
    public function registerUser() {
        $par = I("get.");
        $par = array_change_key_case($par, CASE_LOWER);
        $code = $par['invitecode'];
        $invite = $this->getInviteCode($code);
        //微信授权获取用户信息
        $wechat = new WeiXinLogic();
        $wxUserInfo = $wechat->getUserInfo();
        if (isset($wxUserInfo["openid"]) && strlen($wxUserInfo["openid"]) > 5) {
            $this->assign('wxUserInfo', $wxUserInfo);
        }
        if (!empty($wxUserInfo['openid'])) {
            $this->assign('wxUserInfo', $wxUserInfo);
        }
        $this->assign('loginUrl', $this->getAuthUrl($this->loginURL));
        $this->assign("inviteCode", $invite);
        $this->display('register');
    }

    /**
     * 存储/获取邀请码
     */
    private function getInviteCode($inviteCode = '') {

        if (!empty($inviteCode)) {
            cookie("inviteCode", $inviteCode, 1800);
        }
        return cookie("inviteCode");
    }

    /**
     * 新增注册
     */
    public function addRegister() {
        if (!IS_AJAX) {
            $this->jsonReturn(0, "非法请求");
        }
        $par = I("post.par");
        $data["phone"] = $par["userPhone"];
        $data["phoneCode"] = $par["phoneCode"];
        $data["inviteCode"] = $par["inviteCode"];
        $data["userName"] = $data["phone"];
        $data["regTerminal"] = 4; //操作的终端
        $data["terminal"] = 4; //操作的终端
        $data["regIP"] = get_client_ip();
        $openid = strlen($par["openID"]) > 5 ? $par["openID"] : '';
        $nikeName = $par["userNickname"];
        $headimgurl = $par["headimgurl"];
        if (!verify_phone($data["phone"])) {
            $this->jsonReturn(0, "请填写正确的手机号码！");
        }
        $sms = new SendSMSLogic();
        $stutas = $sms->ConfirmVerify($data["phone"], $data["phoneCode"]);
        if (!$stutas) {
            $this->jsonReturn(0, "动态验证码错误！");
        }
        $login = new UserLogic();
        $result = $login->Register($data);
        if ($result * 1 > 0) {
            if (!empty($openid)) {
                $login->bindWeixin($result, $openid);
            }
            if (!empty($nikeName) && !empty($headimgurl)) {
                $wxdata["userNickname"] = $nikeName;
                $wxdata["headUrl"] = $headimgurl;
                $login->editbindExist($result, $wxdata);
            }
            $this->jsonReturn(1, "注册成功", "/Wechat/User/regsucceed/");
        } else {
            $this->jsonReturn(0, $result);
        }
    }

    /**
     * 注册成功页
     */
    public function regsucceed() {
        $this->display("regsucceed");
    }

    //获取短信验证码
    public function getPhoneCode() {
        if (!IS_AJAX) {
            $this->jsonReturn(0, "非法请求");
        }
        $par = I("post.par");
        $phone = $par["phone"];
        try {
            if (!verify_phone($phone)) {
                $this->jsonReturn(0, "手机号码填写不正确");
            }
            $logic = new UserLogic();
            $verifyphone = $logic->userCheck($phone, 3);
            if ($verifyphone) {
                $this->jsonReturn(0, "此号码已注册");
            }
            $this->sendCode("Register", $phone);
        } catch (\Exception $ex) {
            logger_sys("注册发送短信异常" . $phone, $ex->getMessage());
        }
    }

    /**
     * 发送短信方法
     * @param type $type
     * @param type $mobile
     * @return type
     */
    private function sendCode($type, $mobile) {
        $logic = new SendSMSLogic();
        $res = $logic->sendCode($mobile, $type, 4); //WX端
        if ($res === true) {
            $this->jsonReturn(1, '验证码发送成功');
        } else {
            $this->jsonReturn(0, $res);
        }
    }


    /**
     * 唤醒页面
     */
    public function wakeUp() {
        $this->display("index");
    }

}
