<?php
/**
 * Created by PhpStorm.
 * User: zhoull
 * Date: 2018/8/15
 * Time: 10:38
 */

namespace Service\Connect\Logic;

use Common\Common\GraphDbHelper;
use Service\Connect\Model\ConnectModel;
use Service\Connect\Model\ConnectTypeEnum;

class DataImportLogic
{
    private $db_handler=null;
    private $neo_import_path = 'D:\Data\neo4j\distributions\neo4j\neo4j-enterprise-3.4.4\import';
    function __construct()
    {
        $this->db_handler=GraphDbHelper::getInstance();
    }

    /**
     * 导入qhz模拟数据
     */
    public function import4QhzDbMock()
    {
        //获取数据
        $db = M('','','mysql://root:qhz@192.168.1.252:3306/mbox20180813');
        $list = $db->query("select a.realName as name,a.phone,b.dearName,b.dearPhone,b.dearBear from d_user a 
INNER JOIN d_user_info b on a.userId=b.userId
WHERE b.dearName is not NULL and b.dearName<>''");
        $lst_node = array();
        $lst_connection = array();
        foreach ($list as $item) {
            $item['realName'] = aes($item['name'],'DECODE');
            $lst_node[]= [$item['realName'],$item['phone']];
            $lst_node[]= [$item['dearname'],$item['dearphone']];
            $type_connection = ConnectTypeEnum::CONTACT;
            $level = ConnectTypeEnum::getLevel($type_connection);
            $grade = ConnectModel::level2Grade($level);
            $lst_connection[]=[$item['phone'],$item['dearphone'],$type_connection,$level,$grade];
        }

        //导出用户
        $filePath = str_replace('\\','/',dirname(THINK_PATH))."/Publish/tmp/node_" . date('Ymdhis') . ".csv";
        $fp = fopen($filePath, "a+");
        //添加表头
        $field='name,phone';
        $title=explode(',',$field);
        fputcsv($fp, $title);
        //添加内容
        foreach ($lst_node as $item) {
            fputcsv($fp,$item);
        }
        fclose($fp);
        //导入neo
        $fileName=basename($filePath);
        copy($filePath,$this->neo_import_path.'\\'.$fileName);
        $rs = $this->db_handler->importNode('file:///'.$fileName,'Person',$field);

        //导出用户关系
        $filePath = str_replace('\\','/',dirname(THINK_PATH))."/Publish/tmp/rel_" . date('Ymdhis') . ".csv";
        $fp = fopen($filePath, "a+");
        //添加表头
        $field='from_id,to_id,type,level,grade';
        $title=explode(',',$field);
        fputcsv($fp, $title);
        //添加内容
        foreach ($lst_connection as $item) {
            fputcsv($fp,$item);
        }
        fclose($fp);
        //导入neo
        $fileName=basename($filePath);
        copy($filePath,$this->neo_import_path.'\\'.$fileName);
        $where_from='phone:from_id';
        $where_to='phone:to_id';
        $rs = $this->db_handler->importRelation('file:///'.$fileName,'Person',$where_from,$where_to,'FOLLOW','type,level,grade');
    }

    /**
     * 从通讯录表导入
     * @param $user_id
     */
    public function import4Contacts($user_id){
        $model = M("UserMaillist");
        $list = $model->where(['userID'=>$user_id,'isDataClean'=>0])
            ->field(["userName","phone","group"])->select();
        if($list && count($list)>0){
            $q = "
MERGE (m:Person{mobile:'%s'}) 
MERGE (n:Person{user_id:%d})
MERGE (n)-[r:".ConnectTypeEnum::getKey(ConnectTypeEnum::CONTACT)."]->(m)
ON MATCH set r.title='%s',r.desc='%s'
ON CREATE set r.title='%s',r.desc='%s';";
            $q_batch='';
            $t=0;
            for($i=0;$i<count($list);$i++){
                $item = $list[$i];
                if(!$item['phone'])continue;
                $arr_phone = explode(',',$item['phone']);
                foreach ($arr_phone as $item_phone) {
                    $q_batch .= sprintf($q,$item_phone,$user_id,$item['userName'],$item['group'],$item['userName'],$item['group']);
                    $this->db_handler->query($q_batch);
                    $q_batch='';
                    /*$t++;
                    if($t>=15){//每次执行15条
                        $this->db_handler->query($q_batch);
                        $q_batch='';
                        $t=0;
                    }*/
                }
            }
            /*if($q_batch){
                $this->db_handler->query($q_batch);
            }*/
            $model->where(['userID'=>$user_id,'isDataClean'=>0])->save(['isDataClean'=>1]);
        }
    }
}