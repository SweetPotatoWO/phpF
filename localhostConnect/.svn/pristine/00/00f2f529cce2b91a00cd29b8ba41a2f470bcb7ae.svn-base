<?php

/**
 * Created by PhpStorm.
 * User: zhoull
 * Date: 2018/8/14
 * Time: 9:29
 */
namespace Service\Connect\Logic;
use Common\Common\GraphDbHelper;
use Service\Connect\Model\CompanyModel;
use Service\Connect\Model\ConnectModel;
use Service\Connect\Model\ConnectStudyModel;
use Service\Connect\Model\ConnectTypeEnum;
use Service\Connect\Model\ConnectWorkModel;
use Service\Connect\Model\PersonModel;
use Service\Connect\Model\SchoolModel;

class ConnectRelationLogic
{
    //别名-类名映射
    private $map_person = ['m'=>PersonModel::class];
    private $db_handler = null;
    function __construct()
    {
        $this->db_handler = GraphDbHelper::getInstance();
    }

    //region 查询
    /**
     * 获取指定用户的好友人脉列表
     * @param $user_id
     * @param string $limit 格式：limit 或 skip,limit
     * @return PersonModel[]
     */
    public function getConnectList($user_id,$limit)
    {
        $q = "MATCH (n:Person)-[r]->(m:Person)
WHERE n.user_id={user_id} AND m.user_id is not null
RETURN m";
        return $this->db_handler->query($q,$limit,$this->map_person,['user_id'=>$user_id]);
    }

    /**
     * 获取共同好友
     * @param $user_id1
     * @param $user_id2
     * @param string $limit 格式：limit 或 skip,limit
     * @return PersonModel[]
     */
    public function getCommonFriends($user_id1,$user_id2,$limit)
    {
        $q = "MATCH (:Person {user_id:{user_id1}})-[r]->(m:Person)<-[r]-(:Person {user_id:{user_id2}})
WHERE m.user_id is not null
RETURN m";
        return $this->db_handler->query($q,$limit,$this->map_person,['user_id1'=>$user_id1,'user_id2'=>$user_id2]);
    }

    /**
     * 获取所有公司
     * @param $limits 格式：limit 或 skip,limit
     * @return CompanyModel[]
     */
    public function getCompanys($limits)
    {
        return $this->db_handler->findBy(CompanyModel::class,null,null,$limits);
    }

    /**
     * 获取所有学校
     * @param $limits 格式：limit 或 skip,limit
     * @return SchoolModel[]
     */
    public function getSchools($limits)
    {
        return $this->db_handler->findBy(SchoolModel::class,null,null,$limits);
    }

    /**
     * 获取所有个人
     * @param $limits 格式：limit 或 skip,limit
     * @return SchoolModel[]
     */
    public function getPersons($limits)
    {
        return $this->db_handler->findBy(PersonModel::class,null,null,$limits);
    }

    /**
     * 获取某公司的员工
     * @param $user_id 发起查询的用户的编号
     * @param $company_id 公司编号
     * @param $limits 格式：limit 或 skip,limit
     * @return SchoolModel[]
     */
    public function getPersonsByCompany($user_id,$company_id,$limits)
    {
        $param = ['user_id' => $user_id,'company_id' => $company_id];
        $q = "MATCH (m:Person)-->(:Company{company_id:{company_id}})
WHERE m.user_id<>{user_id} AND m.user_id is not null
RETURN m
ORDER BY m.active_grade";
        $list = $this->db_handler->query($q,$limits,$this->map_person,$param);
        return $list;
    }

    /**
     * tongji 某公司的员工
     * @param $user_id 发起查询的用户的编号
     * @param $company_id 公司编号
     * @return int
     */
    public function countPersonsByCompany($user_id,$company_id)
    {
        $param = ['user_id' => $user_id,'company_id' => $company_id];
        $q = "MATCH (m:Person)-->(:Company{company_id:{company_id}})
WHERE m.user_id<>{user_id} AND m.user_id is not null
RETURN count(m) as c";
        $result = $this->db_handler->query($q,'','',$param);
        return $result[0]['c'];
    }
    //endregion

    //region 推荐
    /**
     * 获取指定用户的推荐好友列表
     * 用于首页推荐
     * @param $user_id
     * @param string $limit 格式：limit 或 skip,limit
     * @param bool $is_th 是否同行
     * @param bool $is_tc 是否同城
     * @param bool $is_active 是否活跃
     * @return PersonModel[]
     */
    public function getRecommendFriend($user_id, $limit, $is_th=false, $is_tc=false, $is_active=false)
    {

        $param = ['user_id' => $user_id];
        $q = "MATCH (n:Person{user_id:{user_id}})
MATCH (m:Person)
WHERE m.user_id<>n.user_id AND m.user_id is not null AND NOT (n)-->(m) %s
OPTIONAL MATCH p1=(n)-->(friend)<--(m)
OPTIONAL MATCH p2=shortestPath((n)-[*..6]->(m))
WITH m,size(nodes(p1)) as c1,size(nodes(p2)) as c2,abs(sign(m.industry_id-n.industry_id)) as industry,abs(sign(m.city_id-n.city_id)) as city
ORDER BY industry,m.active_grade,c1,city,c2 
RETURN m,industry,city,c1,c2";
        //活跃度
        $q_hy = "";
        if($is_active){
            $q_hy=" AND m.active_grade>{last_active} ";
            $dt = time()-7*24*3600;
            $param['last_active']=$dt;
        }
        //同行
        $q_th = "";
        if($is_th){
            $q_th = " AND m.industry_id=n.industry_id ";
        }
        //同城
        $q_tc = "";
        if($is_tc){
            $q_tc = " AND m.city_id=n.city_id ";
        }
        $q = sprintf($q,$q_th.$q_tc.$q_hy);
        $list = $this->db_handler->query($q,$limit,$this->map_person,$param);
        $result = [];
        if($list){
            foreach ($list as $item) {
                $person = $item['m'];
                $lbls = [];
                if($item['industry']=='0')
                    $lbls[]='同行';
                if($item['city']=='0')
                    $lbls[]='同城';
                if($item['c1'])
                    $lbls[]='有共同好友';
                $lbl = implode(',',$lbls);
                $person->setLabel($lbl);
                $result[] = $person;
            }
        }


        return $result;
    }

    /**
     * 获取指定用户的推荐人脉列表
     * 用于人脉页推荐
     * @param $user_id
     * @param string $limit 格式：limit 或 skip,limit
     * @param bool $is_work 是否仅同事
     * @param bool $is_study 是否仅校友
     * @return array|mixed
     */
    public function getRecommendConnect($user_id,$limit,$is_work=false,$is_study=false)
    {

        $param = ['user_id' => $user_id];
        $q = "MATCH (n:Person{user_id:{user_id}}),(m:Person)
WHERE NOT (n)--(m) AND m.user_id is not null AND ((n)-->(:School)<--(m) OR (n)-->(:Company)<--(m))
OPTIONAL MATCH p1=(n)-->(:School)<--(m)
OPTIONAL MATCH p2=(n)-->(:Company)<--(m)
RETURN m,
	CASE WHEN p1 IS NULL THEN 0 ELSE 1 END AS c1,
    CASE WHEN p2 IS NULL THEN 0 ELSE 1 END AS c2
ORDER BY c1+c2 DESC,m.active_grade DESC";
        if($is_work){
            $q = "MATCH (n:Person{user_id:{user_id}})-->(:Company)<--(m:Person)
WHERE not (n)--(m) AND m.user_id is not null
OPTIONAL MATCH p=(n)-->(:School)<--(m)
RETURN m,
    CASE WHEN p IS NULL THEN 0 ELSE 1 END AS c1,
    1 as c2
ORDER BY c1+c2 DESC,m.active_grade DESC";
        }else if($is_study){
            $q = "MATCH (n:Person{user_id:{user_id}})-->(:School)<--(m:Person)
WHERE not (n)--(m) AND m.user_id is not null
OPTIONAL MATCH p=(n)-->(:Company)<--(m)
RETURN m,
    1 as c1,
    CASE WHEN p IS NULL THEN 0 ELSE 1 END AS c2
ORDER BY c1+c2 DESC,m.active_grade DESC";
        }
        $list = $this->db_handler->query($q,$limit,$this->map_person,$param);
        $result = [];
        if($list){
            foreach ($list as $item) {
                $person = $item['m'];
                $lbl = [];
                if($item['c2']){
                    $lbl[] = '同事';
                }
                if($item['c1']){
                    $lbl[] = '校友';
                }
                $person->setLabel(implode(',',$lbl));
                $result[] = $person;
            }
        }
        return $result;
    }

    /**
     * 根据共同好友数量（倒序）获取推荐列表
     * @param $user_id
     * @param string $limit 格式：limit 或 skip,limit
     * @return PersonModel[]
     */
    public function getRecommendByCommonFriends($user_id,$limit)
    {
        $q = "MATCH (n:Person {user_id:{user_id}})-[]->(friend)<-[]-(m:Person) 
        WHERE  m.user_id is not null
        RETURN m,COUNT(*) AS comCount ORDER BY comCount DESC";
        return $this->db_handler->query($q,$limit,$this->map_person,['user_id'=>$user_id]);
    }
    //endregion

    /**
     * 添加或编辑个人信息(以手机为标识)
     * @param PersonModel $person
     * @return bool
     */
    public function upsertPerson(PersonModel $person)
    {
        $param = $person->getEditParam('n',['mobile']);
        $q = "MERGE (n:Person {mobile:'".$person->getMobile()."'})";
        if($param)
            $q .= "
ON CREATE SET ".$param['query']."
ON MATCH SET ".$param['query'];
        return $this->db_handler->execute($q,$param['param']);
    }

    /**
     * 批量更新活跃度
     * @param $list
     * @return bool
     */
    public function batchUpsertAcitive($list)
    {
        $q = "merge (n%d:Person{user_id:%d}) set n%d.active_grade=%d
        ";
        $arr = [];
        foreach ($list as $idx=>$item) {
            $arr[] = sprintf($q,$idx,$item['user_id'],$idx,$item['active']);
            if(count($arr)>=20){
                $this->db_handler->execute(implode('',$arr));
                $arr = [];
            }
        }
        if(count($arr)>0){
            $this->db_handler->execute(implode('',$arr));
        }
        return true;
    }

    /**
     * 修改手机号码
     * @param $user_id
     * @param $phone
     * @return bool
     */
    public function modifyPhone($user_id,$phone)
    {
        $q = "MATCH (n:Person {user_id:{$user_id}})
SET n.mobile='$phone';";
        return $this->db_handler->execute($q);
    }
    /**
     * 新增或修改人脉关系
     * @param ConnectModel $connect
     * @return bool
     */
    public function upsertConnect(ConnectModel $connect)
    {
        $from = $connect->getFrom();
        $to = $connect->getTo();
        $dir_1='-';
        $dir_2='->';
        $param = $connect->getEditParam();
        $q = "MERGE (n:Person{user_id:".$from->getUserId()."})
            MERGE (m:Person{user_id:".$to->getUserId()."})
            MERGE (n)".$dir_1."[r:".ConnectTypeEnum::getKey($connect->getType())."]$dir_2(m)";
        if($param)
            $q .= "
ON CREATE SET ".$param['query']."
ON MATCH SET ".$param['query'];
        return $this->db_handler->execute($q,$param['param']);
    }
    /**
     * 删除人脉关系
     * @param ConnectModel $connect
     * @return bool
     */
    public function delConnect(ConnectModel $connect)
    {
        $from = $connect->getFrom();
        $to = $connect->getTo();
        $q = "MATCH (n:Person{user_id:".$from->getUserId()."})-[r]->(m:Person{user_id:".$to->getUserId()."})
            DELETE r;";
        return $this->db_handler->execute($q);
    }

    /**
     * 添加或编辑当前工作信息
     * @param ConnectWorkModel $connect
     * @return bool
     */
    public function upsertCompany(ConnectWorkModel $connect)
    {
        $person = $connect->getStaff();
        $company = $connect->getCompany();
        if(!$person->getCompanyId() && $company->getCompanyId()){
            $person->setCompanyId($company->getCompanyId());
            $person->setCompany($company->getCompanyName());
            $person->setJobTitle($connect->getJobtitle());
        }
        $param = $connect->getUpsertQuery();
        return $this->db_handler->execute($param['query'],$param['param']);
    }

    /**
     * 添加或编辑工作经历
     * @param ConnectWorkModel $connect
     * @return bool
     */
    public function upsertWork(ConnectWorkModel $connect)
    {
        $param = $connect->getUpsertQuery();
        return $this->db_handler->execute($param['query'],$param['param']);
    }

    /**
     * 删除工作经历
     * @param ConnectWorkModel $connect
     * @return bool
     */
    public function delWork(ConnectWorkModel $connect)
    {
        $from = $connect->getStaff();
        $to = $connect->getCompany();
        $q = "MATCH (n:Person{user_id:".$from->getUserId()."})-[r]->(m:Company{company_id:'".$to->getCompanyId()."'})
            DELETE r;";
        return $this->db_handler->execute($q);
    }

    /**
     * 添加或编辑教育经历
     * @param ConnectStudyModel $connect
     * @return bool
     */
    public function upsertStudy(ConnectStudyModel $connect)
    {
        $param = $connect->getUpsertQuery();
        return $this->db_handler->execute($param['query'],$param['param']);
    }

    /**
     * 删除教育经历
     * @param ConnectStudyModel $connect
     * @return bool
     */
    public function delStudy(ConnectStudyModel $connect)
    {
        $from = $connect->getStudent();
        $to = $connect->getSchool();
        $q = "MATCH (n:Person{user_id:".$from->getUserId()."})-[r]->(m:School{school_id:".$to->getSchoolId()."})
            DELETE r;";
        return $this->db_handler->execute($q);
    }
    //endregion

    //region 转发

    /**
     * 通知导入指定用户的通讯录
     * @param $user_id
     */
    public function notifyImportContacts($user_id)
    {
        $data['user_id']=$user_id;
        $returnurl = SITE . "Callback/importContacts";
        $callLogic = new \Service\Common\CallBackLogic();
        $callLogic->sendCallbackInfo($returnurl, $data);
    }
    //endregion
}